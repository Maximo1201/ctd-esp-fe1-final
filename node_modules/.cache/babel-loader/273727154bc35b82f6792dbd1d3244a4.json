{"ast":null,"code":"/**\n * \nFunción que devuelve todos los personajes por página y filtrados por nombre si es necesario.\n *\n * @param {string | undefined} name\n * @returns {Promise<[Personaje[], PaginaInfo, number] | [any, any, number]>} retornar personajes e informacion\n */\nexport const filtrarPersonajesAPI = async name => {\n  let nameParam = \"\";\n\n  if (name !== \"\" && name !== undefined) {\n    nameParam = `name=${name}`;\n  }\n\n  return fetch(`https://rickandmortyapi.com/api/character?${nameParam}`).then(function (response) {\n    return response.json().then(data => [data.results, data.info, response.status]);\n  });\n};\n/**\n *  \nFunción que devuelve personajes por página.\n *\n * @param {string }url\n * @returns {Promise<[Personaje[], PaginaInfo]>} retorna personajes e informacion.\n */\n\nexport const cambiarPagina = async url => {\n  return fetch(url).then(data => data.json()).then(data => [data.results, data.info]);\n};\n/**\n *\n *\n * @param {Array<number>} arrayEpisodeID\n * @returns {Promise<Episodio | Episodio[]>}\n */\n\nexport const fetchEpisodios = async id => {\n  const response = await fetch(`https://rickandmortyapi.com/api/episode/${id}`);\n  const data = await response.json();\n  return data;\n};","map":{"version":3,"sources":["D:/A_Trabajo/A_ESPECIALIDAD DE FRONT/parcial de front/ctd-esp-fe1-final-main/src/services/personaje.services.ts"],"names":["filtrarPersonajesAPI","name","nameParam","undefined","fetch","then","response","json","data","results","info","status","cambiarPagina","url","fetchEpisodios","id"],"mappings":"AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,oBAAoB,GAAG,MAClCC,IADkC,IAEkC;AACpE,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAID,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAKE,SAA5B,EAAuC;AACrCD,IAAAA,SAAS,GAAI,QAAOD,IAAK,EAAzB;AACD;;AACD,SAAOG,KAAK,CAAE,6CAA4CF,SAAU,EAAxD,CAAL,CAAgEG,IAAhE,CACL,UAAUC,QAAV,EAAoB;AAClB,WAAOA,QAAQ,CACZC,IADI,GAEJF,IAFI,CAEEG,IAAD,IAAU,CAACA,IAAI,CAACC,OAAN,EAAeD,IAAI,CAACE,IAApB,EAA0BJ,QAAQ,CAACK,MAAnC,CAFX,CAAP;AAGD,GALI,CAAP;AAOD,CAdM;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAa,GAAG,MAC3BC,GAD2B,IAEY;AACvC,SAAOT,KAAK,CAACS,GAAD,CAAL,CACJR,IADI,CACEG,IAAD,IAAUA,IAAI,CAACD,IAAL,EADX,EAEJF,IAFI,CAEEG,IAAD,IAAU,CAACA,IAAI,CAACC,OAAN,EAAeD,IAAI,CAACE,IAApB,CAFX,CAAP;AAGD,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,EAAP,IAAyD;AACrF,QAAMT,QAAQ,GAAG,MAAMF,KAAK,CAAE,2CAA0CW,EAAG,EAA/C,CAA5B;AACA,QAAMP,IAAI,GAAG,MAAMF,QAAQ,CAACC,IAAT,EAAnB;AACA,SAAOC,IAAP;AACD,CAJM","sourcesContent":["import Personaje from \"../types/personaje.types\";\nimport PaginaInfo from \"../types/infoPagina.types\";\nimport Episodio from \"../types/episodio.types\";\n\n/**\n * \nFunción que devuelve todos los personajes por página y filtrados por nombre si es necesario.\n *\n * @param {string | undefined} name\n * @returns {Promise<[Personaje[], PaginaInfo, number] | [any, any, number]>} retornar personajes e informacion\n */\n\nexport const filtrarPersonajesAPI = async (\n  name?: string\n): Promise<[Personaje[], PaginaInfo, number] | [any, any, number]> => {\n  let nameParam = \"\";\n  if (name !== \"\" && name !== undefined) {\n    nameParam = `name=${name}`;\n  }\n  return fetch(`https://rickandmortyapi.com/api/character?${nameParam}`).then(\n    function (response) {\n      return response\n        .json()\n        .then((data) => [data.results, data.info, response.status]);\n    }\n  );\n};\n\n/**\n *  \nFunción que devuelve personajes por página.\n *\n * @param {string }url\n * @returns {Promise<[Personaje[], PaginaInfo]>} retorna personajes e informacion.\n */\nexport const cambiarPagina = async (\n  url: string\n): Promise<[Personaje[], PaginaInfo]> => {\n  return fetch(url)\n    .then((data) => data.json())\n    .then((data) => [data.results, data.info]);\n};\n\n/**\n *\n *\n * @param {Array<number>} arrayEpisodeID\n * @returns {Promise<Episodio | Episodio[]>}\n */\nexport const fetchEpisodios = async (id: (string | undefined)[]): Promise<Episodio> => {\n  const response = await fetch(`https://rickandmortyapi.com/api/episode/${id}`);\n  const data = await response.json();\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}