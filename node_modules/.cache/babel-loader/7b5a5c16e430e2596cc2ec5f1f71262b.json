{"ast":null,"code":"const initialState = {\n  status: \"IDLE\",\n  episodios: [],\n  error: null\n};\n/**\r\n * Episodios reducer\r\n *\r\n * @param {State} state\r\n * @param {DataStore.Reducer<EpisodiosState, EpisodiosActions>} action\r\n *\r\n * @returns {State}\r\n */\n\nconst episodiosReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"OBTENER_EPISODIO\":\n      return { ...state,\n        status: \"LOADING\",\n        episodios: [],\n        error: null\n      };\n\n    case \"OBTENER_EPISODIO_SUCCESS\":\n      return { ...state,\n        status: \"COMPLETED\",\n        episodios: action.episodios\n      };\n\n    case \"OBTENER_EPISODIO_ERROR\":\n      return { ...state,\n        status: \"FAILED\",\n        error: action.error\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default episodiosReducer;","map":{"version":3,"sources":["C:/Users/toled/OneDrive/Documentos/GitHub/ctd-esp-fe1-final/src/reducers/episodiosReducer.ts"],"names":["initialState","status","episodios","error","episodiosReducer","state","action","type"],"mappings":"AAUA,MAAMA,YAA4B,GAAG;AACnCC,EAAAA,MAAM,EAAE,MAD2B;AAEnCC,EAAAA,SAAS,EAAE,EAFwB;AAGnCC,EAAAA,KAAK,EAAE;AAH4B,CAArC;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAA2D,GAAG,YAG/C;AAAA,MAFnBC,KAEmB,uEAFXL,YAEW;AAAA,MADnBM,MACmB;;AACnB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELJ,QAAAA,MAAM,EAAE,SAFH;AAGLC,QAAAA,SAAS,EAAE,EAHN;AAILC,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAMF,SAAK,0BAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELJ,QAAAA,MAAM,EAAE,WAFH;AAGLC,QAAAA,SAAS,EAAEI,MAAM,CAACJ;AAHb,OAAP;;AAKF,SAAK,wBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELJ,QAAAA,MAAM,EAAE,QAFH;AAGLE,QAAAA,KAAK,EAAEG,MAAM,CAACH;AAHT,OAAP;;AAKF;AACE,aAAO,EAAE,GAAGE;AAAL,OAAP;AArBJ;AAuBD,CA3BD;;AA6BA,eAAeD,gBAAf","sourcesContent":["import { Reducer } from \"@reduxjs/toolkit\";\r\nimport { EpisodiosActions } from \"../actions/episodiosActions\";\r\nimport Episodio from \"../types/episodio.types\";\r\n\r\ninterface EpisodiosState {\r\n  status: \"IDLE\" | \"LOADING\" | \"COMPLETED\" | \"FAILED\";\r\n  episodios: Episodio| Episodio[];\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: EpisodiosState = {\r\n  status: \"IDLE\",\r\n  episodios: [],\r\n  error: null,\r\n};\r\n\r\n/**\r\n * Episodios reducer\r\n *\r\n * @param {State} state\r\n * @param {DataStore.Reducer<EpisodiosState, EpisodiosActions>} action\r\n *\r\n * @returns {State}\r\n */\r\nconst episodiosReducer: Reducer<EpisodiosState, EpisodiosActions> = (\r\n  state = initialState,\r\n  action\r\n): EpisodiosState => {\r\n  switch (action.type) {\r\n    case \"OBTENER_EPISODIO\":\r\n      return {\r\n        ...state,\r\n        status: \"LOADING\",\r\n        episodios: [],\r\n        error: null,\r\n      };\r\n    case \"OBTENER_EPISODIO_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        status: \"COMPLETED\",\r\n        episodios: action.episodios,\r\n      };\r\n    case \"OBTENER_EPISODIO_ERROR\":\r\n      return {\r\n        ...state,\r\n        status: \"FAILED\",\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default episodiosReducer;\r\n"]},"metadata":{},"sourceType":"module"}